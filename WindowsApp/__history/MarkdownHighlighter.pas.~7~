unit MarkdownHighlighter;

interface

uses
  SysUtils, Classes, Graphics, SynEdit, SynEditHighlighter;

type
  TSynMarkdownSyn = class(TSynCustomHighlighter)
  private
    FHeaderAttri: TSynHighlighterAttributes;
    FBoldAttri: TSynHighlighterAttributes;
    FItalicAttri: TSynHighlighterAttributes;
    FLinkAttri: TSynHighlighterAttributes;
    FPlainTextAttri: TSynHighlighterAttributes;
    FCurrentAttri: TSynHighlighterAttributes;
    FCurrentState: Integer;
  protected
    function GetIdentChars: TSysCharSet;
    function GetDefaultAttribute(Index: Integer): TSynHighlighterAttributes; override;
  public
    function GetEol: Boolean; override;
    procedure Next; override;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

implementation

constructor TSynMarkdownSyn.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);

  FHeaderAttri := TSynHighlighterAttributes.Create('Header', 'header of text');
  FHeaderAttri.Foreground := clBlue;
  AddAttribute(FHeaderAttri);

  FBoldAttri := TSynHighlighterAttributes.Create('Bold');
  FBoldAttri.Foreground := clRed;
  AddAttribute(FBoldAttri);

  FItalicAttri := TSynHighlighterAttributes.Create('Italic');
  FItalicAttri.Foreground := clGreen;
  AddAttribute(FItalicAttri);

  FLinkAttri := TSynHighlighterAttributes.Create('Link');
  FLinkAttri.Foreground := clPurple;
  AddAttribute(FLinkAttri);

  FPlainTextAttri := TSynHighlighterAttributes.Create('PlainText');
  FPlainTextAttri.Foreground := clWindowText;
  AddAttribute(FPlainTextAttri);

  // Default to plain text
  FCurrentAttri := FPlainTextAttri;
  FCurrentState := 0;
end;

destructor TSynMarkdownSyn.Destroy;
begin
  FHeaderAttri.Free;
  FBoldAttri.Free;
  FItalicAttri.Free;
  FLinkAttri.Free;
  FPlainTextAttri.Free;
  inherited Destroy;
end;

function TSynMarkdownSyn.GetIdentChars: TSysCharSet;
begin
  Result := ['a'..'z', 'A'..'Z', '0'..'9', '_'];
end;

function TSynMarkdownSyn.GetEol: Boolean;
begin
  Result := (FTokenPos >= Length(FLine)) or (FLine[FTokenPos] = #10);
end;

procedure TSynMarkdownSyn.Next;
begin
  // Basic example for processing lines, you should extend this for full Markdown support
  case FCurrentState of
    0: // Plain text
      begin
        if FLine[FTokenPos] = '#' then
        begin
          FCurrentAttri := FHeaderAttri;
          Inc(FTokenPos);
        end
        else if FLine[FTokenPos] = '*' then
        begin
          FCurrentAttri := FBoldAttri;
          Inc(FTokenPos);
        end
        else if FLine[FTokenPos] = '_' then
        begin
          FCurrentAttri := FItalicAttri;
          Inc(FTokenPos);
        end
        else if FLine[FTokenPos] = '[' then
        begin
          FCurrentAttri := FLinkAttri;
          Inc(FTokenPos);
        end
        else
        begin
          FCurrentAttri := FPlainTextAttri;
          Inc(FTokenPos);
        end;
      end;
  end;
end;

function TSynMarkdownSyn.GetDefaultAttribute(Index: Integer): TSynHighlighterAttributes;
begin
  case Index of
    0: Result := FHeaderAttri;
    1: Result := FBoldAttri;
    2: Result := FItalicAttri;
    3: Result := FLinkAttri;
    4: Result := FPlainTextAttri;
  else
    Result := nil;
  end;
end;

end.

